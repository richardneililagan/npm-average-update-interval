'use strict';

var Promise = require('bluebird');
var moment = require('moment');
var chalk = require('chalk');

var map = require('lodash/map');
var compact = require('lodash/compact');
var reduce = require('lodash/reduce');

var request = require('./http');
var config = require('./config');
var log = require('./log');

// let's do this shit
var targetCount = 5;
var targetDays = 30; // last 30 days

var startingDate = +moment().add(-targetDays, 'days');
console.log(startingDate);

var task = log.add('Query npm for starred packages').status('Querying').details(`Getting ${ targetCount } packages`);

require('./target-packages')(targetCount).then(function (results) {
  var percentSuccess = ~ ~(results.length / targetCount * 100);
  task.done().details(`[${ percentSuccess }%] ${ results.length } packages found.`);

  var githubDetailsTasks = map(results, function (item) {
    return request(`https://api.github.com/repos/${ item.github_user }/${ item.github_repo }/tags`, {
      auth: `${ config.github_username }:${ config.github_accesstoken }`
    }).then(function (result) {
      item.tags = JSON.parse(result.body);
      item.__task.details(`${ item.tags.length } tags found`);

      return Promise.all(map(item.tags, function (tag) {
        return request(`https://api.github.com/repos/${ item.github_user }/${ item.github_repo }/git/commits/${ tag.commit.sha }`, {
          auth: `${ config.github_username }:${ config.github_accesstoken }`
        }).then(function (response) {
          var res = JSON.parse(response.body);
          var dateCommitted = +moment(res.committer.date);
          return dateCommitted > startingDate;
        });
      }));
    }).then(function (result) {
      return compact(result);
    }).then(function (result) {
      item.recentChanges = result.length;
      item.__task.done().details(chalk.bold.cyan(`${ result.length } recent changes`));

      return item;
    }).catch(function (err) {
      console.log(err);
    });
  });

  return Promise.all(githubDetailsTasks);
}).then(function (results) {
  var totalChanges = reduce(results, function (sum, item) {
    return sum + item.recentChanges;
  }, 0);

  var targetSeconds = targetDays * 24 * 60 * 60;

  console.log('\n' + `${ totalChanges } total changes in the last ${ targetSeconds } seconds over ${ results.length } packages.`);
  console.log(`On average, a change occurs in ${ chalk.bold.green(~ ~(targetSeconds / totalChanges) + ' seconds') }.`);
});
//# sourceMappingURL=data:application/json;base64,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QUFXLElBQVgsQ0FBZ0IsQ0FBQyxHQUFHLE9BQU8sTUFBUCxFQUFlLGVBQW5CLENBQWhCLENBQTNCLEVBRmM7O0FBSWQsYUFBTyxJQUFQLENBSmM7S0FBVixDQXJCRCxDQTJCSixLQTNCSSxDQTJCRSxlQUFPO0FBQ1osY0FBUSxHQUFSLENBQVksR0FBWixFQURZO0tBQVAsQ0EzQlQsQ0FENEM7R0FBUixDQUFsQyxDQUpXOztBQXFDZixTQUFPLFFBQVEsR0FBUixDQUFZLGtCQUFaLENBQVAsQ0FyQ2U7Q0FBWCxDQURSLENBd0NHLElBeENILENBd0NRLG1CQUFXO0FBQ2YsTUFBSSxlQUFlLE9BQU8sT0FBUCxFQUFnQixVQUFDLEdBQUQsRUFBTSxJQUFOLEVBQWU7QUFDaEQsV0FBTyxNQUFNLEtBQUssYUFBTCxDQURtQztHQUFmLEVBRWhDLENBRmdCLENBQWYsQ0FEVzs7QUFLZixNQUFJLGdCQUFnQixhQUFhLEVBQWIsR0FBa0IsRUFBbEIsR0FBdUIsRUFBdkIsQ0FMTDs7QUFPZixVQUFRLEdBQVIsQ0FBWSxPQUFPLENBQUMsR0FBRyxZQUFKLEVBQWtCLDJCQUFsQixHQUFnRCxhQUFoRCxFQUErRCxjQUEvRCxHQUFnRixRQUFRLE1BQVIsRUFBZ0IsVUFBaEcsQ0FBUCxDQUFaLENBUGU7QUFRZixVQUFRLEdBQVIsQ0FBWSxDQUFDLCtCQUFELEdBQW1DLE1BQU0sSUFBTixDQUFXLEtBQVgsQ0FBaUIsRUFBQyxFQUFFLGdCQUFnQixZQUFoQixDQUFGLEdBQWtDLFVBQW5DLENBQXBELEVBQW9HLENBQXBHLENBQVosRUFSZTtDQUFYLENBeENSIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpXHJcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKVxyXG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXHJcblxyXG52YXIgbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpXHJcbnZhciBjb21wYWN0ID0gcmVxdWlyZSgnbG9kYXNoL2NvbXBhY3QnKVxyXG52YXIgcmVkdWNlID0gcmVxdWlyZSgnbG9kYXNoL3JlZHVjZScpXHJcblxyXG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cCcpXHJcbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpXHJcbnZhciBsb2cgPSByZXF1aXJlKCcuL2xvZycpXHJcblxyXG4vLyBsZXQncyBkbyB0aGlzIHNoaXRcclxudmFyIHRhcmdldENvdW50ID0gNVxyXG52YXIgdGFyZ2V0RGF5cyA9IDMwICAgICAvLyBsYXN0IDMwIGRheXNcclxuXHJcbnZhciBzdGFydGluZ0RhdGUgPSArKG1vbWVudCgpLmFkZCgtdGFyZ2V0RGF5cywgJ2RheXMnKSlcclxuY29uc29sZS5sb2coc3RhcnRpbmdEYXRlKVxyXG5cclxudmFyIHRhc2sgPSBsb2cuYWRkKCdRdWVyeSBucG0gZm9yIHN0YXJyZWQgcGFja2FnZXMnKVxyXG4gIC5zdGF0dXMoJ1F1ZXJ5aW5nJylcclxuICAuZGV0YWlscyhgR2V0dGluZyAkeyB0YXJnZXRDb3VudCB9IHBhY2thZ2VzYClcclxuXHJcbnJlcXVpcmUoJy4vdGFyZ2V0LXBhY2thZ2VzJykodGFyZ2V0Q291bnQpXHJcbiAgLnRoZW4ocmVzdWx0cyA9PiB7XHJcbiAgICB2YXIgcGVyY2VudFN1Y2Nlc3MgPSB+fihyZXN1bHRzLmxlbmd0aCAvIHRhcmdldENvdW50ICogMTAwKVxyXG4gICAgdGFzay5kb25lKCkuZGV0YWlscyhgWyR7IHBlcmNlbnRTdWNjZXNzIH0lXSAkeyByZXN1bHRzLmxlbmd0aCB9IHBhY2thZ2VzIGZvdW5kLmApXHJcblxyXG4gICAgdmFyIGdpdGh1YkRldGFpbHNUYXNrcyA9IG1hcChyZXN1bHRzLCBpdGVtID0+IHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QoXHJcbiAgICAgICAgYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHsgaXRlbS5naXRodWJfdXNlciB9LyR7IGl0ZW0uZ2l0aHViX3JlcG8gfS90YWdzYCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBhdXRoOiBgJHsgY29uZmlnLmdpdGh1Yl91c2VybmFtZSB9OiR7IGNvbmZpZy5naXRodWJfYWNjZXNzdG9rZW4gfWBcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICBpdGVtLnRhZ3MgPSBKU09OLnBhcnNlKHJlc3VsdC5ib2R5KVxyXG4gICAgICAgICAgaXRlbS5fX3Rhc2suZGV0YWlscyhgJHsgaXRlbS50YWdzLmxlbmd0aCB9IHRhZ3MgZm91bmRgKVxyXG5cclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChtYXAoaXRlbS50YWdzLCB0YWcgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8keyBpdGVtLmdpdGh1Yl91c2VyIH0vJHsgaXRlbS5naXRodWJfcmVwbyB9L2dpdC9jb21taXRzLyR7IHRhZy5jb21taXQuc2hhIH1gLCB7XHJcbiAgICAgICAgICAgICAgYXV0aDogYCR7IGNvbmZpZy5naXRodWJfdXNlcm5hbWUgfTokeyBjb25maWcuZ2l0aHViX2FjY2Vzc3Rva2VuIH1gXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICB2YXIgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KVxyXG4gICAgICAgICAgICAgIHZhciBkYXRlQ29tbWl0dGVkID0gK21vbWVudChyZXMuY29tbWl0dGVyLmRhdGUpXHJcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGVDb21taXR0ZWQgPiBzdGFydGluZ0RhdGVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0pKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IGNvbXBhY3QocmVzdWx0KSlcclxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgaXRlbS5yZWNlbnRDaGFuZ2VzID0gcmVzdWx0Lmxlbmd0aFxyXG4gICAgICAgICAgaXRlbS5fX3Rhc2suZG9uZSgpLmRldGFpbHMoY2hhbGsuYm9sZC5jeWFuKGAkeyByZXN1bHQubGVuZ3RoIH0gcmVjZW50IGNoYW5nZXNgKSlcclxuXHJcbiAgICAgICAgICByZXR1cm4gaXRlbVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGdpdGh1YkRldGFpbHNUYXNrcylcclxuICB9KVxyXG4gIC50aGVuKHJlc3VsdHMgPT4ge1xyXG4gICAgdmFyIHRvdGFsQ2hhbmdlcyA9IHJlZHVjZShyZXN1bHRzLCAoc3VtLCBpdGVtKSA9PiB7XHJcbiAgICAgIHJldHVybiBzdW0gKyBpdGVtLnJlY2VudENoYW5nZXNcclxuICAgIH0sIDApXHJcblxyXG4gICAgdmFyIHRhcmdldFNlY29uZHMgPSB0YXJnZXREYXlzICogMjQgKiA2MCAqIDYwXHJcblxyXG4gICAgY29uc29sZS5sb2coJ1xcbicgKyBgJHsgdG90YWxDaGFuZ2VzIH0gdG90YWwgY2hhbmdlcyBpbiB0aGUgbGFzdCAkeyB0YXJnZXRTZWNvbmRzIH0gc2Vjb25kcyBvdmVyICR7IHJlc3VsdHMubGVuZ3RoIH0gcGFja2FnZXMuYClcclxuICAgIGNvbnNvbGUubG9nKGBPbiBhdmVyYWdlLCBhIGNoYW5nZSBvY2N1cnMgaW4gJHsgY2hhbGsuYm9sZC5ncmVlbih+fih0YXJnZXRTZWNvbmRzIC8gdG90YWxDaGFuZ2VzKSArICcgc2Vjb25kcycpIH0uYClcclxuICB9KVxyXG4iXX0=